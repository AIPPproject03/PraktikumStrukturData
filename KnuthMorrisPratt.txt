VOID Compute LPS Array :

Text = Irwin --> 5
Pat  = win --> 3
len = 0
i = 1
pat = lps[]
{'w,'i','n'} --> {0,0,0}
lps[] = {0,0,0}
lps[0] = 0;

i < pat = 1 < 3 --> 1,2 (2 Perulangan)

1) if (pat.charAt(1) == pat.charAt(0))
   if ('i' == 'w')--> SALAH
   }else{
   if ( len(0) != 0) SALAH
   }else{
   lps[1] = 0; BENER
   i++ --> 2;
 
2) if (pat.charAt(2) == pat.charAt(0))
   if ('n' == 'w') SALAH
   }else{
   if (len(0) != 0) SALAH
   }else{
   lps[2] = 0; BENER

lps[0] = 0
lps[1] = 0
lps[2] = 0

======================================================================
VOID Knuth Morris Pratt :

Text = Irwin --> 5
Pat  = win --> 3
int lps[] = new int[3]
int j = 0;
int i = 0;
)> Pemanggilan ComputeLPSarray (lps[] = {0,0,0})

while (i(0) < 5) --> 0,1,2,3,4 (5 Perulangan)
0) if (pat.charAt(0) == text.charAt(0)
   if ('w' == 'I') SALAH
   }else if( 0 < 5 && pat.charAt(0) != txt.charAt(0))
         if( 0 < 5 && 'w' != 'I') BENAR
   if ( 0 != 0) SALAH
   else
   i = 0 + 1
   i = 1;
1) if (pat.charAt(0) == text.charAt(1))
   if ('w' == 'r') SALAH
   }else if(1 < 5 && pat.charAt(0) != text.charAt(1))
         if(1 < 5 %% 'w' != 'r') BENAR
   if ( 0 != 0) SALAH
   else
   i = 1 + 1
   i = 2;
2) if (pat.charAt(0) == text.charAt(2))
   if ('w' == 'w') BENAR
   j++ --> 1
   i++ --> 3
   if (1 == 3)
   Print ( Index i - j --> 3 - 1 = (2))
3) if (pat.charAt(1) == text.charAt(3))
   if ('i' == 'i') BENAR
   j++ --> 2
   i++ --> 4
   if (2 == 3)
   Print ( Index i - j --> 4 - 2 = (2))
4) if (pat.charAt(2) == text.charAt(4))
   if ('n' == 'n') BENAR
   j++ --> 3
   i++ --> 5
   if (3 == 3)
   Print ( Index i - j --> 5 - 3 = (2))

Pattern Ditemukan Pada Index-2